---
- name: AAP 2.5 Container Health Check Playbook
  hosts: all:!bastion
  gather_facts: yes

  vars:
    expected_containers:
      platform_gateway:
        - redis-tcp
        - automation-gateway-proxy
        - automation-gateway
      controller:
        - redis-unix
        - receptor
        - automation-controller-rsyslog
        - automation-controller-task
        - automation-controller-web
      hub:
        - redis-unix
        - automation-hub-api
        - automation-hub-content
        - automation-hub-web
        - automation-hub-worker-1
        - automation-hub-worker-2
      eda:
        - automation-eda-api
        - automation-eda-daphne
        - automation-eda-web
        - automation-eda-worker-1
        - automation-eda-worker-2
        - automation-eda-activation-worker-1
        - automation-eda-activation-worker-2
        - automation-eda-scheduler

    smtp_server: "your.smtp.server.com"
    smtp_port: 25
    from_email: "aap-monitoring@yourcompany.com"
    to_email: ["admin@yourcompany.com"]

    report_title: "AAP 2.5 Container Health Check Report"

  tasks:
    - name: Get all running containers
      containers.podman.podman_container_info:
      register: container_info

    - name: Record current time for uptime calculation
      set_fact:
        aap_now_time: "{{ ansible_date_time.iso8601 }}"

    - name: Make list of running container names
      set_fact:
        running_container_names: "{{ container_info.containers | map(attribute='Name') | list }}"

    - name: Determine component type and expected containers
      set_fact:
        component_type: "{{ group_names[0] }}"
        expected_container_list: "{{ expected_containers[group_names[0]] | default([]) }}"

    - name: Check expected containers and collect status (with uptime calc only)
      set_fact:
        container_status: "{{ container_status | default([]) + [item_status] }}"
      vars:
        container_present: "{{ item in running_container_names }}"
        container_data: "{{ container_info.containers | selectattr('Name', 'equalto', item) | list | first | default({}) }}"
        container_state: "{{ container_data.State.Status | default('not found') if container_present else 'not found' }}"
        started_at_raw: "{{ container_data.State.StartedAt | default('') if container_present else '' }}"
        uptime: >-
          {% if container_present and started_at_raw %}
            {% set now = aap_now_time | regex_replace('Z$', '') %}
            {% set now_dt = now[:19] | to_datetime('%Y-%m-%dT%H:%M:%S') %}
            {% set started = started_at_raw | regex_replace('Z$', '') %}
            {% set started_dt = started[:19] | to_datetime('%Y-%m-%dT%H:%M:%S') %}
            {% set delta = (now_dt - started_dt).total_seconds()|int %}
            {% set days = (delta // 86400) %}
            {% set hours = ((delta % 86400) // 3600) %}
            {% set minutes = ((delta % 3600) // 60) %}
            {% if days > 0 %}
              {{ days }}d {{ hours }}h {{ minutes }}m
            {% elif hours > 0 %}
              {{ hours }}h {{ minutes }}m
            {% elif minutes > 0 %}
              {{ minutes }}m
            {% else %}
              <1m
            {% endif %}
          {% else %}
            N/A
          {% endif %}
        item_status:
          name: "{{ item }}"
          present: "{{ container_present }}"
          state: "{{ container_state }}"
          uptime: "{{ uptime | trim }}"
      loop: "{{ expected_container_list }}"

    - name: Categorize container statuses
      set_fact:
        healthy_containers: "{{ container_status | selectattr('present', 'equalto', true) | selectattr('state', 'equalto', 'running') | list }}"
        down_containers: "{{ container_status | selectattr('present', 'equalto', true) | rejectattr('state', 'equalto', 'running') | list }}"
        missing_containers: "{{ container_status | rejectattr('present', 'equalto', true) | list }}"

    - name: Determine overall host status
      set_fact:
        host_status: "{{ 'CRITICAL' if (missing_containers | length > 0 or down_containers | length > 0) else 'HEALTHY' }}"

    - name: Update host results
      set_fact:
        host_results:
          host: "{{ inventory_hostname }}"
          component_type: "{{ component_type }}"
          containers: "{{ container_status }}"
          missing_containers: "{{ missing_containers }}"
          down_containers: "{{ down_containers }}"
          healthy_containers: "{{ healthy_containers }}"
          status: "{{ host_status }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"

    - name: Save host results for aggregation
      set_fact:
        host_report_result: "{{ host_results }}"
      delegate_to: localhost
      delegate_facts: true

  post_tasks:
    - name: Gather all host results into a list (excluding bastion)
      set_fact:
        all_host_results: >-
          {{
            (groups['all']
            | difference(groups['bastion'] | default([])))
            | map('extract', hostvars, 'host_report_result')
            | select('defined')
            | list
          }}
      delegate_to: localhost
      run_once: true

- name: Set global health failure fact if any host or job test fails
  set_fact:
    health_check_failed: "{{ 'health_check_failed' if
      (
        (
          all_host_results | selectattr('status','equalto','CRITICAL') | list | length > 0
          or all_host_results | selectattr('down_containers', 'defined') | selectattr('down_containers','length') | list | length > 0
          or all_host_results | selectattr('missing_containers', 'defined') | selectattr('missing_containers','length') | list | length > 0
        )
        or
        (
          job_test_results is defined and
          job_test_results | selectattr('status', 'lower') | select('ne', 'ok') | list | length > 0
        )
      )
      else omit
    }}"
  delegate_to: localhost
  run_once: true
    - name: Generate HTML report
      template:
        src: aap_health_report.j2
        dest: /tmp/aap_health_report_{{ ansible_date_time.epoch }}.html
      delegate_to: localhost
      run_once: true
      vars:
        report_data: "{{ all_host_results }}"

- name: Send HTML email report
  community.general.mail:
    host: "{{ smtp_server }}"
    port: "{{ smtp_port }}"
    subject: "{{ report_title }} - {{ ansible_date_time.date }}"
    body: "{{ lookup('file', '/tmp/aap_health_report_' + ansible_date_time.epoch + '.html') }}"
    from: "{{ from_email }}"
    to: "{{ to_email }}"
    subtype: html
    charset: utf8
  delegate_to: localhost
  run_once: true
  when: 
    - all_host_results is defined
    - all_host_results | selectattr('status','equalto','CRITICAL') | list | length > 0
      or all_host_results | selectattr('down_containers','defined') | selectattr('down_containers','length') | list | length > 0
      or all_host_results | selectattr('missing_containers','defined') | selectattr('missing_containers','length') | list | length > 0


    - name: Clean up temporary report file
      file:
        path: "/tmp/aap_health_report_{{ ansible_date_time.epoch }}.html"
        state: absent
      delegate_to: localhost
      run_once: true
# - name: Convert container start time to uptime delta
#   set_fact:
#     uptime_delta: "{{ now() - (container_data.State.StartedAt | to_datetime) }}"


{% if container.present and container.started_at %}
  {{ (now() - (container.started_at.split('.')[0] + 'Z') | to_datetime).days }}d
  {{ ((now() - (container.started_at.split('.')[0] + 'Z') | to_datetime).seconds // 3600) }}h
  {{ (((now() - (container.started_at.split('.')[0] + 'Z') | to_datetime).seconds // 60) % 60) }}m
  {{ ((now() - (container.started_at.split('.')[0] + 'Z') | to_datetime).seconds % 60) }}s
{% else %}
  N/A
{% endif %}

# - name: Set human-readable uptime with seconds
#   set_fact:
#     uptime: "{{ uptime_delta.days }}d {{ (uptime_delta.seconds // 3600) }}h {{ ((uptime_delta.seconds // 60) % 60) }}m {{ (uptime_delta.seconds % 60) }}s"
