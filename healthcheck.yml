---
- name: AAP 2.5 Container Health Check Playbook
  hosts: all
  gather_facts: yes

  vars:
    expected_containers:
      platform_gateway:
        - redis-tcp
        - automation-gateway-proxy
        - automation-gateway
      controller:
        - redis-unix
        - receptor
        - automation-controller-rsyslog
        - automation-controller-task
        - automation-controller-web
      hub:
        - redis-unix
        - automation-hub-api
        - automation-hub-content
        - automation-hub-web
        - automation-hub-worker-1
        - automation-hub-worker-2
      eda:
        - automation-eda-api
        - automation-eda-daphne
        - automation-eda-web
        - automation-eda-worker-1
        - automation-eda-worker-2
        - automation-eda-activation-worker-1
        - automation-eda-activation-worker-2
        - automation-eda-scheduler

    smtp_server: "your.smtp.server.com"
    smtp_port: 25
    from_email: "aap-monitoring@yourcompany.com"
    to_email: ["admin@yourcompany.com"]

    report_title: "AAP 2.5 Container Health Check Report"

  tasks:
    - name: Get all running containers
      containers.podman.podman_container_info:
      register: container_info

    - name: Make list of running container names
      set_fact:
        running_container_names: "{{ container_info.containers | map(attribute='Name') | list }}"

    - name: Determine component type and expected containers
      set_fact:
        component_type: "{{ group_names[0] }}"
        expected_container_list: "{{ expected_containers[group_names[0]] | default([]) }}"

    - name: Check expected containers and collect status
      set_fact:
        container_status: "{{ container_status | default([]) + [item_status] }}"
      vars:
        container_present: "{{ item in running_container_names }}"
        container_data: "{{ container_info.containers | selectattr('Name', 'equalto', item) | list | first | default({}) }}"
        container_state: "{{ container_data.State.Status | default('not found') if container_present else 'not found' }}"
        item_status:
          name: "{{ item }}"
          present: "{{ container_present }}"
          state: "{{ container_state }}"
          started_at: "{{ container_data.State.StartedAt | default('') if container_present else '' }}"
      loop: "{{ expected_container_list }}"

    - name: Categorize container statuses
      set_fact:
        healthy_containers: "{{ container_status | selectattr('present', 'equalto', true) | selectattr('state', 'equalto', 'running') | list }}"
        down_containers: "{{ container_status | selectattr('present', 'equalto', true) | rejectattr('state', 'equalto', 'running') | list }}"
        missing_containers: "{{ container_status | rejectattr('present', 'equalto', true) | list }}"

    - name: Determine overall host status
      set_fact:
        host_status: "{{ 'CRITICAL' if (missing_containers | length > 0 or down_containers | length > 0) else 'HEALTHY' }}"

    - name: Update host results
      set_fact:
        host_results:
          host: "{{ inventory_hostname }}"
          component_type: "{{ component_type }}"
          containers: "{{ container_status }}"
          missing_containers: "{{ missing_containers }}"
          down_containers: "{{ down_containers }}"
          healthy_containers: "{{ healthy_containers }}"
          status: "{{ host_status }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"

    - name: Store results on localhost
      set_fact:
        all_host_results: "{{ all_host_results | default([]) + [host_results] }}"
      delegate_to: localhost
      delegate_facts: true

  post_tasks:
    - name: Generate HTML report
      template:
        src: aap_health_report.j2
        dest: /tmp/aap_health_report_{{ ansible_date_time.epoch }}.html
      delegate_to: localhost
      run_once: true
      vars:
        report_data: "{{ hostvars['localhost']['all_host_results'] }}"

    - name: Send HTML email report
      community.general.mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        subject: "{{ report_title }} - {{ ansible_date_time.date }}"
        body: "{{ lookup('file', '/tmp/aap_health_report_' + ansible_date_time.epoch + '.html') }}"
        from: "{{ from_email }}"
        to: "{{ to_email }}"
        subtype: html
        charset: utf8
      delegate_to: localhost
      run_once: true
      when: hostvars['localhost']['all_host_results'] is defined

    - name: Clean up temporary report file
      file:
        path: "/tmp/aap_health_report_{{ ansible_date_time.epoch }}.html"
        state: absent
      delegate_to: localhost
      run_once: true
